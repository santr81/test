//TODO:This autogenerated class includes the basics for a Registration
//Handler class. You will need to customize it to ensure it meets your needs and
//the data provided by the third party.

global class AutocreatedRegHandler1480341026657 implements Auth.RegistrationHandler{

public class userProvisioningException extends Exception {}

    global boolean canCreateUser(Auth.UserData data) {
    if(data.attributeMap.containsKey('sub') && data.attributeMap.get('sub') != null){
            system.debug('sub parameter ok');
            return true;
        }
        system.debug('sub parameter not ok');
    return false;
}

//User with provided SNCF Id never logged in Salesforce through SNCF Id provider
global User createUser(Id portalId, Auth.UserData data){
    if(!canCreateUser(data)) {
        //Returning null or throwing an exception fails the SSO flow
        throw new userProvisioningException ('missing Identifier');
        return null;
    }
    
    system.debug('user never logged in');
    
    //Check if user information for provided SNCF Id already exists in Salesforce
    List<User> us = [Select Id , username from User where federationIdentifier= :data.attributeMap.get('sub')];
    if (us != null && !us.isEmpty())
    { 
       system.debug('user information exists');
       
       system.debug(data);
       
       return us.get(0);
       
    }
    
    else {
        String pr = 'Contract Manager';
        
        if (data.attributeMap.containsKey('email') || data.attributeMap.containsKey('family_name'))
          {
            User u = new User();
            Profile p = [SELECT Id FROM profile WHERE name=:pr];
            u.username = data.attributeMap.get('sub') + '@garesetconnexions.com';
            
            //Check on email
            if (data.attributeMap.get('email') !=null && data.attributeMap.get('email') !='')
            { 
                u.email = data.attributeMap.get('email');
            }
            else
            { 
                throw new userProvisioningException ('missing User email information');
                return null;
            }
            
            //Check on last name
            if (data.attributeMap.get('family_name') !=null && data.attributeMap.get('family_name') !='')
            {     
                u.lastName = data.attributeMap.get('family_name');
            }
            
            else
            { 
                throw new userProvisioningException ('missing User last name information');
                return null;
            }
            
            u.firstName = data.attributeMap.get('first_name');
            String alias = u.username;
            
            //Alias must be 8 characters or less
            if(alias.length() > 8) {
                alias = alias.substring(0, 8);
            }
            
            
    
            //TODO: Customize the username and profile. Also check that the username doesn't already exist and
            //possibly ensure there are enough org licenses to create a user. Must be 80 characters or less.
            
            u.federationIdentifier= data.attributeMap.get('sub');
            u.alias = alias;
            //u.languagelocalekey = UserInfo.getLocale();
            u.languagelocalekey='fr';
            u.localesidkey = 'fr';
            u.emailEncodingKey = 'UTF-8';
            u.timeZoneSidKey = 'America/Los_Angeles';
            u.profileId = p.Id;
            //u.contactId = c.Id;
            system.debug('user information created in Salesforce');
            return u;
           }
        else throw new userProvisioningException ('missing User information: Email or Last name');
        return null;
    }
   
}

//User with provided SNCF Id already logged in Salesforce through SNCF Id provider
global void updateUser(Id userId, Id portalId, Auth.UserData data){
    system.debug('user already logged in once');
    system.debug(data);
    User u = new User(id=userId);
    //TODO: Customize the username. Must be 80 characters or less.
    //u.username = data.username + '@myorg.com';
    //u.email = data.email;
    
    
    
    if (data.attributeMap.get('family_name')!= null && data.attributeMap.get('family_name') != '')
        u.lastName = data.attributeMap.get('family_name');
     
    if  (data.attributeMap.get('first_name')!= null && data.attributeMap.get('first_name') != '')   
        u.firstName = data.attributeMap.get('first_name');
    
    /*if  (data.attributeMap.get('email')!= null && data.attributeMap.get('email') != '')
    {system.debug(data.attributeMap.get('email'));   
        u.email = data.attributeMap.get('email'); 
       }*/  
    update(u);
       
}
}